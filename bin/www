#!/usr/bin/env node
import http from 'http'
import httpStatus from 'http-status'
import 'dotenv/config'

import app from '../app.js'
import debug0 from 'debug'
import sequelize from '../config/db/database.js'

import { AppError, appLogger } from '../src/utils/index.js'
import { errorConverter, errorHandler } from '../src/middlewares/error.js'

const debug = debug0(`${process.env.APP_NAME}:${process.env.NODE_ENV}`)
const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

const server = http.createServer(app)
server.keepAliveTimeout = 65000
server.headersTimeout = 66000

server.on('error', onError)
server.on('listening', onListening)

// Add fallback 404 and global error handling (you can move these to app.js if preferred)
app.use((req, res, next) => {
  next(new AppError(httpStatus.NOT_FOUND, 'GLOBAL_E2'))
})
app.use(errorConverter)
app.use(errorHandler)

async function startServer() {
  try {
    await sequelize.authenticate()
    appLogger.info('✅ DB_CONNECTED')

    server.listen(port)
  } catch (error) {
    appLogger.error({
      message: '❌ Database connection failed',
      data: {
        server: process.env.SERVER_NAME || 'Orbit',
        name: error.name,
        message: error.message,
        stack: error.stack,
        cause: error.cause,
      },
    })
    process.exit(1)
  }
}

startServer()

function normalizePort(val) {
  const port = parseInt(val, 10)
  if (isNaN(port)) return val
  if (port >= 0) return port
  return false
}

function onError(error) {
  if (error.syscall !== 'listen') throw error

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`

  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`)
      process.exit(1)
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`)
      process.exit(1)
    default:
      throw error
  }
}

function onListening() {
  const addr = server.address()
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`

  appLogger.info(`🚀 Server listening on ${bind}`)
  debug(`Listening on ${bind}`)
}
